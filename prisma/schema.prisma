generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerAccountId String  @map("provider_account_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  name          String
  role          UserRole  @default(USER)
  accounts      Account[]
  orders        Order[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  discount    Int?     @default(0)
  image       String
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  quantity  Int          @default(1)
  status    OrderStatus? @default(PENDING)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Post {
  id         String              @id @default(uuid())
  userId     String
  title      String
  body       String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  published  Boolean             @default(false)
  categories CategoriesOnPosts[]
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id        String              @id @default(uuid())
  name      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now())
  posts     CategoriesOnPosts[]
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  image       Json
  video       Json
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
}
