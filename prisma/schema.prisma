generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerAccountId String  @map("provider_account_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String?
  emailVerified  DateTime?
  name           String
  role           UserRole  @default(USER)
  isSubscribed   Boolean   @default(false)
  subscribeEnd   DateTime?
  subscribeStart DateTime?
  accounts       Account[]
  address        Address?
  orders         Order[]
  posts          Post[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  country   String
  address   String
  city      String
  state     String
  zip       String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  discount    Float?   @default(0)
  quantity    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @unique
  thumbnail   String
  orders      Order[]
}

model Order {
  id        String       @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  quantity  Int          @default(1)
  status    OrderStatus? @default(PENDING)
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Post {
  id         String              @id @default(uuid())
  userId     String
  title      String
  body       String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  published  Boolean             @default(false)
  slug       String              @unique
  thumbnail  String
  categories CategoriesOnPosts[]
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id        String              @id @default(uuid())
  name      String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  posts     CategoriesOnPosts[]
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  video       Json
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  slug        String   @unique
  thumbnail   String
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPING
  DELIVERED
  CANCELLED
}
