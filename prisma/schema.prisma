generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  providerAccountId String  @map("provider_account_id")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  name          String
  role          String    @default("user")
  accounts      Account[]
  Order         Order[]
  Post          Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String   @id @default(cuid())
  name            String
  description     String
  price           Float
  discount        Int?     @default(0)
  image           String
  quantity        Int      @default(0)
  quantityOrdered Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  startTime DateTime
  endTime   DateTime
  status    String   @default("ordered")
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         String              @id @default(cuid())
  userId     String
  title      String
  body       String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  categories CategoriesOnPosts[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}
